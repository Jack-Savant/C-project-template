#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Define the structure
struct listing {
    int id, host_id, minimum_nights, number_of_reviews, calculated_host_listings_count, availability_365;
    char *host_name, *neighbourhood_group, *neighbourhood, *room_type;
    float latitude, longitude, price;
};

// Function to parse each line and return a structure
struct listing getfields(char* line) {
    struct listing item;
    item.id = atoi(strtok(line, ","));
    item.host_id = atoi(strtok(NULL, ","));
    item.host_name = strdup(strtok(NULL, ","));
    item.neighbourhood_group = strdup(strtok(NULL, ","));
    item.neighbourhood = strdup(strtok(NULL, ","));
    item.latitude = atof(strtok(NULL, ","));
    item.longitude = atof(strtok(NULL, ","));
    item.room_type = strdup(strtok(NULL, ","));
    item.price = atof(strtok(NULL, ","));
    item.minimum_nights = atoi(strtok(NULL, ","));
    item.number_of_reviews = atoi(strtok(NULL, ","));
    item.calculated_host_listings_count = atoi(strtok(NULL, ","));
    item.availability_365 = atoi(strtok(NULL, ","));
    return item;
}

// Comparison function for sorting by host_name
int compare_host_name(const void *a, const void *b) {
    struct listing *listingA = (struct listing *)a;
    struct listing *listingB = (struct listing *)b;
    return strcmp(listingA->host_name, listingB->host_name);
}

// Comparison function for sorting by price
int compare_price(const void *a, const void *b) {
    struct listing *listingA = (struct listing *)a;
    struct listing *listingB = (struct listing *)b;
    if (listingA->price < listingB->price) return -1;
    if (listingA->price > listingB->price) return 1;
    return 0;
}

// Function to display the structure (optional for debugging)
void displayStruct(struct listing item) {
    printf("%d, %d, %s, %s, %s, %.2f, %.2f, %s, %.2f, %d, %d, %d, %d\n",
        item.id, item.host_id, item.host_name, item.neighbourhood_group, item.neighbourhood, 
        item.latitude, item.longitude, item.room_type, item.price, 
        item.minimum_nights, item.number_of_reviews, item.calculated_host_listings_count, 
        item.availability_365);
}

int main() {
    FILE *fptr;
    char line[1024];
    struct listing list_items[1000]; // Assuming a maximum of 1000 items
    int count = 0;

    // Open the file in read mode
    fptr = fopen("listings.csv", "r");
    if (fptr == NULL) {
        printf("Error opening file\n");
        return 1;
    }

    // Read each line and store it in the structure
    while (fgets(line, sizeof(line), fptr)) {
        list_items[count++] = getfields(line);
    }

    // Close the input file
    fclose(fptr);

    // Sort by host_name and write to file
    qsort(list_items, count, sizeof(struct listing), compare_host_name);
    FILE *sorted_by_name = fopen("sorted_by_host_name.csv", "w");
    for (int i = 0; i < count; i++) {
        fprintf(sorted_by_name, "%d,%d,%s,%s,%s,%.2f,%.2f,%s,%.2f,%d,%d,%d,%d\n", 
                list_items[i].id, list_items[i].host_id, list_items[i].host_name, 
                list_items[i].neighbourhood_group, list_items[i].neighbourhood, 
                list_items[i].latitude, list_items[i].longitude, list_items[i].room_type, 
                list_items[i].price, list_items[i].minimum_nights, list_items[i].number_of_reviews, 
                list_items[i].calculated_host_listings_count, list_items[i].availability_365);
    }
    fclose(sorted_by_name);

    // Sort by price and write to file
    qsort(list_items, count, sizeof(struct listing), compare_price);
    FILE *sorted_by_price = fopen("sorted_by_price.csv", "w");
    for (int i = 0; i < count; i++) {
        fprintf(sorted_by_price, "%d,%d,%s,%s,%s,%.2f,%.2f,%s,%.2f,%d,%d,%d,%d\n", 
                list_items[i].id, list_items[i].host_id, list_items[i].host_name, 
                list_items[i].neighbourhood_group, list_items[i].neighbourhood, 
                list_items[i].latitude, list_items[i].longitude, list_items[i].room_type, 
                list_items[i].price, list_items[i].minimum_nights, list_items[i].number_of_reviews, 
                list_items[i].calculated_host_listings_count, list_items[i].availability_365);
    }
    fclose(sorted_by_price);

    return 0;
}
